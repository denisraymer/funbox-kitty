{"version":3,"sources":["assets/images/content/product-kitty.png","components/ProductCard.js","hooks/useActive.js","page/HomePage.js","page/404.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProductCard","props","productData","disabled","isActive","category","useState","isActiveProduct","setIsActiveProduct","productMessage","setProductMessage","productStatus","setProductStatus","useEffect","useActive","addProduct","className","onClick","description","name","characteristics","map","item","index","key","src","require","alt","price","HomePage","products","_id","Page404","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.43b1e15e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/product-kitty.a1f22694.png\";","import React from 'react';\r\nimport useActive from '../hooks/useActive';\r\n\r\nconst ProductCard = (props) => {\r\n    const {productData} = props;\r\n    const [{productStatus, productMessage}, addProduct] = useActive(productData);\r\n\r\n    return (\r\n        <div className={`product-card ${productStatus}`} onClick={addProduct}>\r\n            <div className='product-card__content'>\r\n                <div className='product-card__description'>{productData.description}</div>\r\n                <div className='product-card__title'>{productData.name}</div>\r\n                <div className='product-card__category'>c {productData.category}</div>\r\n                <ul className='product-card__characteristics'>\r\n                    {productData.characteristics.map((item, index) => <li key={index}>{item}</li>)}\r\n                </ul>\r\n                <img src={require('../assets/images/content/product-kitty.png')} alt='Kitty'\r\n                     className='product-card__image'/>\r\n                <div className=\"product-card__price\">{productData.price} <span className='unit'>кг</span></div>\r\n            </div>\r\n            <div className='product-card__footer'>\r\n                {productMessage}\r\n                {!productStatus ? <button className='button button_default' onClick={addProduct}> купи</button> : ''}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductCard;\r\n","import {useEffect, useState} from 'react';\r\n\r\nexport default ({isActive: disabled, category}) => {\r\n    const [isActiveProduct, setIsActiveProduct] = useState(false);\r\n    const [productMessage, setProductMessage] = useState('Чего сидишь? Порадуй котэ, ');\r\n    const [productStatus, setProductStatus] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (!disabled) {\r\n            setProductMessage(`Печалька, с ${category} закончился.`);\r\n            setProductStatus('product-card_disabled');\r\n        }\r\n    }, []);\r\n\r\n    const addProduct = () => {\r\n        if (!disabled) {\r\n            return null\r\n        } else if (!isActiveProduct) {\r\n            setProductStatus('product-card_selected');\r\n            setProductMessage('Головы щучьи с чесноком да свежайшая сёмгушка.');\r\n            setIsActiveProduct(!isActiveProduct)\r\n        } else {\r\n            setProductStatus('');\r\n            setProductMessage('Чего сидишь? Порадуй котэ, ');\r\n            setIsActiveProduct(!isActiveProduct)\r\n        }\r\n    };\r\n\r\n    return [{productStatus, productMessage}, addProduct]\r\n}\r\n","import React from 'react';\r\nimport ProductCard from '../components/ProductCard';\r\nimport products from '../data.json';\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <div className='card-block'>\r\n            <div className=\"card-block__title\">Ты сегодня покормил кота?</div>\r\n            <div className=\"card-block__stroke\">\r\n                {products.products.map(productData => {\r\n                    return <ProductCard productData={productData} key={productData._id}/>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\n\r\nconst Page404 = () => {\r\n    return (\r\n        <h1>404 Not found</h1>\r\n    )\r\n}\r\n\r\nexport default Page404;\r\n","import React from 'react';\r\nimport HomePage from './page/HomePage';\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport Page404 from './page/404';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path='/' component={HomePage}/>\r\n                <Route component={Page404}/>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/styles/main.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}